// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Color {
  id    Int    @id @default(autoincrement())
  label String @unique
  value String
  color String
  links Link[]
}

model ColorBg {
  id          Int          @id @default(autoincrement())
  color       String       @unique
  appearances Appearance[]
}

model StylesButtons {
  id      Int    @id @default(autoincrement())
  text    String
  rounded String

  appearances Appearance[] // ‚Üê este es el lado inverso
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  pages Page[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Page {
  id           String   @id @default(uuid())
  name         String
  createdAt    DateTime @default(now())
  userCreated  String
  modifiedAt   DateTime @updatedAt
  userModified String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  profileInformation ProfileInformation?
  links              Link[]
  appearance         Appearance?
}

model Link {
  id        String @id @default(uuid())
  linkTitle String
  url       String
  colorId   Int?
  pageId    String
  page      Page   @relation(fields: [pageId], references: [id])

  color Color? @relation(fields: [colorId], references: [id])
}

model Appearance {
  id            String @id @default(uuid())
  colorBgId     Int?
  styleButtonId Int?
  pageId        String @unique
  page          Page   @relation(fields: [pageId], references: [id])

  colorBg     ColorBg?       @relation(fields: [colorBgId], references: [id])
  styleButton StylesButtons? @relation(fields: [styleButtonId], references: [id])
}

model ProfileInformation {
  id       String @id @default(uuid())
  userName String
  bio      String
  avatar   String
  pageId   String @unique
  page     Page   @relation(fields: [pageId], references: [id])

  socialMedias SocialMedia[]
}

model SocialMedia {
  id                   String             @id @default(uuid())
  name                 String
  url                  String
  profileInformationId String
  profileInformation   ProfileInformation @relation(fields: [profileInformationId], references: [id])
}
